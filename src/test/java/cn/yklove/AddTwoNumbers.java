package cn.yklove;


import org.junit.Assert;
import org.junit.Test;

import java.util.Objects;

//ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ
//
// Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ
//
// ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ
//
// Á§∫‰æãÔºö
//
// ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 0 -> 8
//ÂéüÂõ†Ôºö342 + 465 = 807
//
// Related Topics ÈìæË°® Êï∞Â≠¶
// üëç 4792 üëé 0
public class AddTwoNumbers {

    @Test
    public void test() {
        long startTime = System.currentTimeMillis();
        Solution solution = new Solution();
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(3);
        ListNode l2 = new ListNode(5);
        l2.next = new ListNode(6);
        l2.next.next = new ListNode(4);
        ListNode ans = new ListNode(7);
        ans.next = new ListNode(0);
        ans.next.next = new ListNode(8);
        Assert.assertEquals(solution.addTwoNumbers(l1, l2), ans);
        System.out.println(System.currentTimeMillis() - startTime);
    }

    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode(int x) { val = x; }
     * }
     */
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            int carryANumber = 0;
            ListNode head = new ListNode(-1);
            ListNode tmp = head;
            while (l1 != null && l2 != null) {
                int current = l1.val + l2.val + carryANumber;
                tmp.next = new ListNode(current % 10);
                carryANumber = current / 10;
                tmp = tmp.next;
                l1 = l1.next;
                l2 = l2.next;
            }
            while (l1 != null) {
                int current = l1.val + carryANumber;
                tmp.next = new ListNode(current % 10);
                carryANumber = current / 10;
                tmp = tmp.next;
                l1 = l1.next;
            }
            while (l2 != null) {
                int current = l2.val + carryANumber;
                tmp.next = new ListNode(current % 10);
                carryANumber = current / 10;
                tmp = tmp.next;
                l2 = l2.next;
            }
            if (carryANumber != 0) {
                tmp.next = new ListNode(carryANumber);
            }
            return head.next;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)



    public class ListNode {
        int val;
        ListNode next;

        ListNode(int x) {
            val = x;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ListNode listNode = (ListNode) o;

            if (val != listNode.val) return false;
            return Objects.equals(next, listNode.next);
        }

        @Override
        public int hashCode() {
            int result = val;
            result = 31 * result + (next != null ? next.hashCode() : 0);
            return result;
        }
    }

}
